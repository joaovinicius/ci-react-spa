<?php

namespace Admin\Controllers\Api;

use Admin\Services\\{{pascalCase name}}Service;
use CodeIgniter\API\ResponseTrait;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\RESTful\ResourceController;
use Exception;

/**
 * @OA\Tag(
 *     name="{{pascalCase name}}",
 *     description="Operations about {{lowerCase table}}"
 * )
 * @OA\Schema(
 *     schema="{{pascalCase name}}",
 *     type="object",
 *     @OA\Property(property="id", type="integer", example=1),
 *     @OA\Property(property="org_id", type="integer", example=1),
 *     @OA\Property(property="tenant_id", type="integer", example=1),
 *     @OA\Property(
 *         property="created_at",
 *         type="object",
 *         @OA\Property(property="date", type="string", example="2025-06-08 02:13:02.000000"),
 *         @OA\Property(property="timezone_type", type="integer", example=3),
 *         @OA\Property(property="timezone", type="string", example="UTC")
 *     ),
 *     @OA\Property(
 *         property="updated_at",
 *         type="object",
 *         @OA\Property(property="date", type="string", example="2025-06-08 02:13:02.000000"),
 *         @OA\Property(property="timezone_type", type="integer", example=3),
 *         @OA\Property(property="timezone", type="string", example="UTC")
 *     )
 * )
 * @OA\Schema(
 *     schema="{{pascalCase name}}Input",
 *     type="object",
 *     required={"org_id", "tenant_id"},
 *     @OA\Property(property="org_id", type="integer", example=1),
 *     @OA\Property(property="tenant_id", type="integer", example=1),
 * )
 */
class {{pascalCase name}}Controller extends ResourceController
{
  use ResponseTrait;

  protected $service;
  protected $format = 'json';

  public function __construct()
  {
    $this->service = new {{pascalCase name}}Service();
  }

  /**
  * @OA\Get(
  *     path="/{{kebabCase table}}",
  *     tags={"{{pascalCase name}}"},
  *     summary="Get paginated list of {{lowerCase table}}",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="get{{pascalCase table}}",
  *     @OA\Parameter(
  *         name="limit",
  *         in="query",
  *         description="Number of records to return",
  *         required=false,
  *         @OA\Schema(
  *             type="integer",
  *             default=20
  *         )
  *     ),
  *     @OA\Parameter(
  *         name="offset",
  *         in="query",
  *         description="Number of records to skip",
  *         required=false,
  *         @OA\Schema(
  *             type="integer",
  *             default=0
  *         )
  *     ),
  *     @OA\Response(
  *         response=200,
  *         description="Successful response",
  *         @OA\JsonContent(
  *             type="object",
  *             @OA\Property(
  *                 property="data",
  *                 type="array",
  *                 @OA\Items(ref="#/components/schemas/{{pascalCase name}}")
  *             ),
  *             @OA\Property(
  *                 property="paging",
  *                 type="object",
  *                 @OA\Property(property="total", type="integer", example=100),
  *                 @OA\Property(property="limit", type="integer", example=20),
  *                 @OA\Property(property="offset", type="integer", example=0)
  *             )
  *         )
  *     ),
  *     @OA\Response(
  *         response=500,
  *         description="Server Error"
  *     )
  * )
  */
  public function index(): ResponseInterface
  {
    try {
      $limit = $this->request->getGet('limit') ?? 20;
      $offset = $this->request->getGet('offset') ?? 0;
      $data = $this->service->getPaginated($limit, $offset);

      return $this->respond($data);
    } catch (Exception $e) {
      return $this->failServerError($e->getMessage());
    }
  }

  /**
  * @OA\Get(
  *     path="/{{kebabCase table}}/all",
  *     tags={"{{pascalCase name}}"},
  *     summary="Get all {{lowerCase name}}",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="getAll{{pascalCase table}}",
  *     @OA\Response(
  *         response=200,
  *         description="Successful response",
  *         @OA\JsonContent(
  *             type="array",
  *             @OA\Items(ref="#/components/schemas/{{pascalCase name}}")
  *         )
  *     ),
  *     @OA\Response(
  *         response=500,
  *         description="Server Error"
  *     )
  * )
  */
  public function all(): ResponseInterface
  {
    try {
      $data = $this->service->getAll();

      return $this->respond($data);
    } catch (Exception $e) {
      return $this->failServerError($e->getMessage());
    }
  }

  /**
  * @OA\Get(
  *     path="/{{kebabCase table}}/{id}",
  *     tags={"{{pascalCase name}}"},
  *     summary="Get {{lowerCase name}} by ID",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="get{{pascalCase name}}ById",
  *     @OA\Parameter(
  *         name="id",
  *         in="path",
  *         description="{{pascalCase name}} ID",
  *         required=true,
  *         @OA\Schema(type="integer")
  *     ),
  *     @OA\Response(
  *         response=200,
  *         description="Successful response",
  *         @OA\JsonContent(ref="#/components/schemas/{{pascalCase name}}")
  *     ),
  *     @OA\Response(
  *         response=404,
  *         description="{{pascalCase name}} not found"
  *     ),
  *     @OA\Response(
  *         response=500,
  *         description="Server Error"
  *     )
  * )
  */
  public function show($id = null): ResponseInterface
  {
  try {
    $data = $this->service->getById($id);

    if ($data) {
      return $this->respond($data);
    }

    return $this->failNotFound();
  } catch (Exception $e) {
    return $this->failServerError($e->getMessage());
  }
  }

  /**
  * @OA\Post(
  *     path="/{{kebabCase table}}",
  *     tags={"{{pascalCase name}}"},
  *     summary="Create a new {{lowerCase name}}",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="create{{pascalCase name}}",
  *     @OA\RequestBody(required=true, @OA\JsonContent(ref="#/components/schemas/{{pascalCase name}}Input")),
  *     @OA\Response(response=201, description="{{pascalCase name}} created successfully", @OA\JsonContent(ref="#/components/schemas/{{pascalCase name}}")),
  *     @OA\Response(
  *         response=400,
  *         description="Invalid input"
  *     ),
  *     @OA\Response(
  *         response=500,
  *         description="Server Error"
  *     )
  * )
  */
  public function create(): ResponseInterface
  {
    try {
      $data = $this->request->getJSON(true);
      $id = $this->service->create($data);

      if (!$id) {
        return $this->failValidationErrors($this->service->getErrors());
      }

      $data = $this->service->getById($id);

      return (!$data) ? $this->failNotFound() : $this->respond($data);
    } catch (Exception $e) {
      return $this->failServerError($e->getMessage());
    }
  }

  /**
  * @OA\Put(
  *     path="/{{kebabCase table}}/{id}",
  *     tags={"{{pascalCase name}}"},
  *     summary="Update a {{lowerCase name}}",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="update{{pascalCase name}}",
  *     @OA\RequestBody(required=true, @OA\JsonContent(ref="#/components/schemas/{{pascalCase name}}Input")),
  *     @OA\Response(response=200, description="{{pascalCase name}} updated successfully", @OA\JsonContent(ref="#/components/schemas/{{pascalCase name}}")),
  *     @OA\Response(response=404, description="Page not found"),
  *     @OA\Response(response=422, description="Validation Error"),
  *     @OA\Response(response=500, description="Server Error")
  * )
  */
  public function update($id = null): ResponseInterface
  {
    try {
      $data = $this->request->getJSON(true);
      $result = $this->service->update($id, $data);

      if (!$result) {
        return $this->failValidationErrors($this->service->getErrors());
      }

      $data = $this->service->getById($id);

      return (!$data) ? $this->failNotFound() : $this->respondUpdated($data);
    } catch (Exception $e) {
    return $this->failServerError($e->getMessage());
    }
  }

  /**
  * @OA\Delete(
  *     path="/{{kebabCase table}}/{id}",
  *     tags={"{{pascalCase name}}"},
  *     summary="Delete a {{lowerCase name}}",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="delete{{pascalCase name}}",
  *     @OA\Parameter(
  *         name="id",
  *         in="path",
  *         description="{{pascalCase name}} ID",
  *         required=true,
  *         @OA\Schema(type="integer")
  *     ),
  *     @OA\Response(
  *       response=200,
  *       description="{{pascalCase name}} deleted successfully",
  *       @OA\JsonContent(
  *           type="object",
  *           @OA\Property(property="id", type="integer", example=1)
  *       )
  *     ),
  *     @OA\Response(response=404, description="{{pascalCase name}} not found"),
  *     @OA\Response(response=500, description="Server Error")
  * )
  */
  public function delete($id = null): ResponseInterface
  {
    try {
      if (!$this->service->delete($id)) {
        return $this->failNotFound();
      }

      return $this->respondDeleted(['id' => (int)$id]);
    } catch (Exception $e) {
      return $this->failServerError($e->getMessage());
    }
  }

  /**
  * @OA\Get(
  *     path="/{{kebabCase table}}/org/{orgId}",
  *     tags={"{{pascalCase name}}"},
  *     summary="Get {{lowerCase table}} by Organization ID",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="get{{pascalCase table}}ByOrgId",
  *     @OA\Parameter(name="orgId", in="path", description="Organization ID", required=true, @OA\Schema(type="integer")),
  *     @OA\Response(response=200, description="Successful response", @OA\JsonContent(type="array", @OA\Items(ref="#/components/schemas/{{pascalCase name}}"))),
  *     @OA\Response(response=500, description="Server Error", @OA\JsonContent(type="object", @OA\Property(property="message", type="string", example="Internal Server Error")))
  * )
  */
  public function getByOrgId($orgId = null): ResponseInterface
  {
    try {
      $data = $this->service->getByOrgId($orgId);

      return $this->respond($data);
    } catch (Exception $e) {
      return $this->failServerError($e->getMessage());
    }
  }

  /**
  * @OA\Get(
  *     path="/{{kebabCase table}}/tenant/{tenantId}",
  *     tags={"{{pascalCase name}}"},
  *      summary="Get {{lowerCase table}} by Tenant ID",
  *     security=\{{"bearerAuth":{}}},
  *     operationId="get{{pascalCase table}}ByTenantId",
  *     @OA\Parameter(name="tenantId", in="path", description="Tenant ID", required=true, @OA\Schema(type="integer")),
  *     @OA\Response(response=200, description="Successful response", @OA\JsonContent(type="array", @OA\Items(ref="#/components/schemas/{{pascalCase name}}"))),
  *     @OA\Response(response=500, description="Server Error", @OA\JsonContent(type="object", @OA\Property(property="message", type="string", example="Internal Server Error")))
  * )
  */
  public function getByTenantId($tenantId = null): ResponseInterface
  {
    try {
      $data = $this->service->getByTenantId($tenantId);

      return $this->respond($data);
    } catch (Exception $e) {
      return $this->failServerError($e->getMessage());
    }
  }
}