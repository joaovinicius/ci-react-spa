<?php

namespace Admin\Services;

use Admin\Repositories\\{{pascalCase name}}Repository;
use Exception;

class {{pascalCase name}}Service
{
  protected $repository;

  public function __construct()
  {
    $this->repository = new {{pascalCase name}}Repository();
  }

  /**
  * Get all
  *
  * @return array
  */
  public function getAll(): array
  {
    return $this->repository->findAll();
  }

  /**
  * Get paginated
  *
  * @param int $limit
  * @param int $offset
  * @return array
  */
  public function getPaginated(int $limit = 0, int $offset = 0): array
  {
    $data['data'] = $this->repository->findPaginated($limit, $offset);

    $data['paging'] = [
      'total' => $this->repository->countAll(),
      'limit' => $limit,
      'offset' => $offset,
    ];

    return $data;
  }

  /**
  * Get by ID
  *
  * @param int $id
  * @return array|null
  */
  public function getById(int $id): ?array
  {
    return $this->repository->find($id);
  }

  /**
  * Get by organization ID
  *
  * @param int $orgId
  * @return array
  */
  public function getByOrgId(int $orgId): array
  {
    return $this->repository->findByOrgId($orgId);
  }

  /**
  * Get by tenant ID
  *
  * @param int $tenantId
  * @return array
  */
  public function getByTenantId(int $tenantId): array
  {
    return $this->repository->findByTenantId($tenantId);
  }

  /**
  * Create
  *
  * @param array $data
  * @return false|int
  */
  public function create(array $data): false|int
  {
    return $this->repository->create($data);
  }

  /**
  * Update
  *
  * @param int $id
  * @param array $data
  * @return bool
  */
  public function update(int $id, array $data): bool
  {
    return $this->repository->update($id, $data);
  }

  /**
  * Delete
  *
  * @param int $id
  * @return bool
  * @throws Exception
  */
  public function delete(int $id): bool
  {
    return $this->repository->delete($id);
  }

  /**
  * Get validation rules
  *
  * @return array
  */
  public function getValidationRules(): array
  {
    return $this->repository->getValidationRules();
  }

  /**
  * Get validation errors from the model
  *
  * @return array
  */
  public function getErrors(): array
  {
    return $this->repository->getErrors();
  }
}